Chapter 3: Function vs. Block Scope
Scope From Functions:
  -function scope encourages the idea that all variables belong to the function,
   and can be used and reused throughout the entirety of the function

Hiding in Plain Scope:
  -take any arbitrary section of code and wrap a function declaration around it,
   which hides the code
  -practical result is to create a scope bubble around the code in question
  -so one can "hide" variables and functions by enclosing them in the scope of a
   function
  -Principle of Least Privilege: in the design of software, such as the API for a
   module/object, one should expose only what is minimally necessary and "hide"
   everything else

Collision Avoidance:
  -results often in unexpected overwriting of values

  Global "Namespaces":
    -multiple libraries loaded into a program can quite easily collide with each
     other if they don't properly hide their internal/private functions and vars
    -libraries typically create a single variable declaration, often an object,
     in the global scope and then it's used as a "namespace" for that library,
     where specific exposures of functionality are made as properties of that
     object

  Module Management:
    -non libraries ever add any identifiers to the global scope, but are instead
     required to have their identifier(s) be explicitly imported

Function as Scopes:
  -while one can hide snippet of code in a function, but there are a few problems
   it introduces, one being that a named function need to be declared, which pollutes
   the enclosing scope, the function name has to be explicitly called to be executed
  -would be more ideal if function didn't have a name
  
  E.g.
    var a = 2;

    (function foo(){ // <-- insert this

      var a = 3;
      console.log( a ); // 3

    })(); // <-- and this

    console.log( a ); // 2
    
    -wrapping function starts with (function ... as oppose to just function...,
     the function gets treated as a function-expression rather than a declaration
    -to distinguish between declaration and expression, the position of the word
     function in the statement is a declaration is the very first thing in the statement
     then it's a function, otherwise, it's a function expression
    -key difference relates to where its name is bound as an identifier
    -in this case, name foo is not bound in the enclosing scope, but instead is
     bound only inside of its own function
    -meaning that (function foo(){..}) is found only in the scope where the ..
     indicates, not in the outer scope, which hides foo inside itself and it
     doesn't pollute the enclosing scope
  
  Anonymous vs. Named
    -anonymous function has no name identifier on it, function express can be anonymous,
     but function declarations cannot omit the name
    -drawbacks
      1. anonymous function have no useful name to display in stack traces
      2. without a name and recursion is needed, the deprecated "arguments.callee"
         is unfortunately required, another e.g. is when an event handler function
         wants to unbind itself after it fires
      3. omits a name that's often helpful in providing more readable/understandable
         code
    -inline function expressions: powerful and useful, question of anonymous vs. 
     named doesn't detract from that, providing a name for your function effectively
     addressed these drawbacks, best practice is to always name your function expressions

  Invoking function expressions immediately
    -(function...)(), () on the end executes the function, aka. Immediately 
     Invoked Function Expression (IIFE)
    -they don't need names, but a good practice
    -(function() { .. }()) is a valid form as well, just a stylistic choice
    
    E.g.
      var a = 2;

      (function IIFE( global ){
      	var a = 3;
      	console.log( a ); // 3
      	console.log( global.a ); // 2
      })( window );
      console.log( a ); // 2
    
    E.g.
      undefined = true; // setting a land-mine for other code! avoid!

      (function IIFE( undefined ){
        var a;
        if (a === undefined) {
          console.log( "Undefined is safe here!" );
        }
      })(); //there must be no parameters being passed in, then declare undefined
    
    E.g. Used in Universal Module Definition
      var a = 2;
    
      (function IIFE( def ){
      	def( window );
      })(function def( global ){
      	var a = 3;
      	console.log( a ); // 3
      	console.log( global.a ); // 2
      });
    
Blocks As Scopes
  -many languages other than JS support Block Scope
  -variable in a block actually scopes itself to the enclosing scope (function or global)
  -block scoping: declaring variables as close as possible, as local as possible,
   to where they will be used
  -however, where we declare variables don't actually matter since they will 
   always belong to the enclosing scope
  -with does create a form of block scope where it only exists for the lifetime
   of that with statement, and not in the enclosing scope
  -try/catch: ES3 specified the var declaration in the catch clause to be block scoped
   to the catch block
   E.g.
   try {
      undefined(); // illegal operation to force an exception!
    }
    catch (err) {
      console.log( err ); // works!
    }

    console.log( err ); // ReferenceError: `err` not found

  -if there are two or more catch clauses in the same scope, using the same variable
   err isn't actually a re-definition, but many linters complain
  
  -let, attaches the variable declaration to the scope of whatever block (commonly
   a { .. } pair) it's contained in
   
  E.g. 
    var foo = true;

    if (foo) {
    let bar = foo * 2;
    bar = something( bar );
    console.log( bar );
    }

    console.log( bar ); // ReferenceError
    
  -explicit block creation can address issues with implicit block scoping, just
   put {} around the wanted/expected variable scope
  -declaration made with let won't hoist to the entire scope of the block they
   appear in, such declaration won't observably "exist" in the block until the
   declaration statement
   E.g.
    {
      console.log( bar ); // ReferenceError!
      let bar = 2;
    }
    
  Garbage Collection
    -if some variable containing lots of data and block scope is not used, it
     does not get garbage collected
    
    E.g.
      function process(data) {
        // do something interesting
      }

      // anything declared inside this block can go away after!
      {
        let someReallyBigData = { .. };
        process( someReallyBigData );
      }

      var btn = document.getElementById( "my_button" );

      btn.addEventListener( "click", function click(evt){
        console.log("button clicked");
      }, /*capturingPhase=*/false );
      
  let (ES6)
    -not only does let in a for loop bind the i to the for-loop body, but it
     re-binds it to each iteration of the loop, making sure to re-assign it to the
     value from the end of the previous loop iteration
    
  const (ES6)
    -also creates a block-scope, but value is fixed (constant)
    
Principle of lease Privilege: in a particular abstraction layer of a computing
environment, every module must be able to access only the information and resources
that are necessary for its legitimate purpose