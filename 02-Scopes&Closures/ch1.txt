Chapter 1: What is Scope?
-variables is what gives a program state.

Compiler Theory:
Traditional compiled language process:
  -Tokenizing/Lexing: breaking up a string of characters into meaningful chunks,
   called tokens
    E.g. var a = 2;  --->  var,a,=,2,;
    -difference between tokenizing/lexing centers on whether or not these tokens
     are identified in a stateless or stateful way
     E.g. if the tokenizer were to invoke stateful parsing rules to figure out
      whether 'a' should be considered a distinct token or part of another, that
      would be lexing

  -Parsing: takes a stream of tokens and turning it into a tree of nested elements
   called an Abstract Syntax Tree (AST)
   E.g. Tree for var a = 2; might start with top-level node called VariableDeclaration
    with a child node called Identifier and another child called AssignmentExpression
    which itself has a child called NumericLiteral

  -Code Generation: process of taking an AST and turning it into executable code
    -takes AST and turn it into a set of machine instructions to actually create
     a variable called a

  -JS engines don't get the luxury of having plenty of time to optimize since JS
   compilation doesn't happen in a build step ahead of time

Understanding Scope:
-Engine: responsible for start-to-finish compilation and execution of a JS program
-Compiler: handle parsing and code-generation
-Scope: collects and maintains a loop-op list of all the declared identifiers (vars),
 and enforces a strict set of rules as to how these are accessible to currently
 executing code

To approach var a = 2:
  -compiler will first perform lexing to break it down into tokens, which then
   parses into a tree
  -encounter var a, asks scope to see if var a already exists for that particular
   scope collection, if so, ignore this declaration and move on, else asks scope
   to declare a new var called a for that scope collection
  -compiler will now produce code for engine to later execute, to handle a = 2,
   code engine runs will first ask if there is a var a in the current scope collection,
   if so, use that var, else look elsewhere
  -if var is never found, raise an error

LHS look-up: done when a variable appears on the left-hand side of an assignment
  operation, and RHS look-up is done when a variable appears on the right-hand side
  of an assignment operation
  E.g. a = 2; <- doesn't matter what a currently is, simply find the variable as
    target for = 2 assignment operation

-RHS look-up can be thought as retrieve his/her source (value), implying go get the value of
-console.log(..) needs a reference to execute, it's an RHS look-up for the console
 object then a property resolution occurs to see if it has a method called log
-not appropriate to think of a function declaration as an LHS look-up assignment
 since compiler handles both the declaration and value definition during code generation,
 there is no process of assigning a function value

Nested Scope:
-scope is a set of rules for looking up variables by their identifier name and
 there's usually more than one Scope to consider
-scopes are nested inside other scopes and if a variable cannot be found in the
 immediate scope, Engine consults the next outer containing scope until found or
 the outermost (global) scope
-rules for traversing nested scope: engine starts at the currently executing scope,
 looks for the variable there, then if not found, keeps going up one level, and so on
 -if the outermost global scope is reached, the search stops, whether it finds
  the variable or not

Errors:
-for RHS, if "undeclared" variable, ReferenceError will be thrown
-by contrast, if Engine is performing an LSH look-up cannot find a var and program
 is not in strict mode then the global Scope will create a new variable of that
 name in the global scope and hand it back to the engine
-TypeError is thrown if engine tries to do something impossible with a value
-ReferenceError is Scope resolution-failure related, whereas TypeError implies
 that Scope resolution was successful
