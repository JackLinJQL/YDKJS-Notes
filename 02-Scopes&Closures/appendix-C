Appendix-C: Lexical-this
E.g.
var obj = {
  id: "awesome",
  cool: function coolFn() {
    console.log( this.id );
  }
};

var id = "not awesome";

obj.cool(); // awesome

setTimeout( obj.cool, 100 ); // not awesome

-problem, loss of 'this' binding on the cool() function
-one way to address this is 'var self = this'

E.g.
var obj = {
	count: 0,
	cool: function coolFn() {
		var self = this;

		if (self.count < 1) {
			setTimeout( function timer(){
				self.count++;
				console.log( "awesome?" );
			}, 100 );
		}
	}
};

obj.cool(); // awesome?

-'self' becomes just an identifier that can be resolved via lexical scope and
 closure, and cares not what happened to the 'this' binding along the way
 
E.g.
var obj = {
	count: 0,
	cool: function coolFn() {
		if (this.count < 1) {
			setTimeout( () => { // arrow-function ftw?
				this.count++;
				console.log( "awesome?" );
			}, 100 );
		}
	}
};

obj.cool(); // awesome?

-arrow function do not behave at all like normal functions when it comes to their
 'this' binding, they discard all the normal rules for 'this' binding and instead
 take on the 'this' value of their immediate lexical enclosing scope

E.g. Proper way
var obj = {
	count: 0,
	cool: function coolFn() {
		if (this.count < 1) {
			setTimeout( function timer(){
				this.count++; // `this` is safe because of `bind(..)`
				console.log( "more awesome" );
			}.bind( this ), 100 ); // look, `bind()`!
		}
	}
};

obj.cool(); // more awesome