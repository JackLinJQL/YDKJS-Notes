Chapter 4: Hoisting

Chicken or the Egg?
  E.g.
    a = 2;
    var a;
    console.log( a ); //2
  
    console.log( a ); //undefined
    var a = 2;
    
  -since engine actually compiles JS code before it interprets it, part of it
   was to find and associate all declarations with their appropriate scope
  -so the best way to think of it is that all declarations, both variables and 
   functions are processed first before any part of code is executed
  -when 'var a = 2;', JS actually thinks of it as two statements: 'var a;' and
   'a = 2;', declaration is processed during the compilation phase, assignment
   is left 'in place' for the execution phase
  -one way of thinking, variable and function declarations are moved from where
   they appear in the flow of the code to the top of the code
    -therefore, the egg (declaration) comes before chicken (assignment)
  -hoisting is per-scope
  -function declarations are hoisted, but function expressions are not
    E.g.
      foo(); // not ReferenceError, but TypeError! //foo at this point is still undefined

      var foo = function bar() { //foo gets hoisted up, function expression bar gets executed after compilation
        // ...
      };
    -even though it's a named function expression, the name identifier is not 
     in the enclosing scope
    
Function First
  -both function and variable declarations are hoisted, but functions are hoisted
   first
   E.g.
      foo(); // 1

      var foo; 

      function foo() {
        console.log( 1 );
      }

      foo = function() {
        console.log( 2 );
      };
  -multiple/duplicate var declarations are effectively ignored, subsequent function
   declarations do override previous ones
   
   Nasty E.g.:
      foo(); // "b" //since function declarations are hoisted to the top and overwritten
                    //when duplicated, therefore, when foo is called, 

      var a = true;
      if (a) {
        function foo() { console.log( "a" ); }
      }
      else {
        function foo() { console.log( "b" ); }
      }

  -Declarations themselves are hoisted, but assignments, even assignments of 
   function expressions, are not hoisted.