Chapter 2: Into JavaScript

Built-in types: string, number, boolean, null (is an object) and undefined, 
                object and symbol(ES6 only)

JavaScript proves typeof operator to show what type a variable is

Objects can be accessed with obj.a or obj["a"]

Subtypes: specialized versions of the object type, such as array(typeof returns
          an object) and function

E.g.
    a = [];
    a.bar = "foo";
    a[0] = 5;
    //a becomes [5, bar: "foo"] and "foo" can only be accessed with calling a.bar

Properties can be added to functions since they are a subtype of objects

Built-In Type Methods:
var a = "hello world";
var b = 3.14159;

a.length;				// 11
a.toUpperCase();		// "HELLO WORLD"
b.toFixed(4);			// "3.1416"

Coercion:
  -explicit coercion is simply seeing from the code that conversion from one type
   to another will occur
  -implicit coercion is when the type conversion can happen as more of a non-obvious
   side-effect
    e.g.
      var a = "42";
      var b = a * 1;	// "42" implicitly coerced to 42 here
      a;				// "42"
      b;				// 42 -- the number!
      
== checks for value equality with coercion allowed and === checks for value equality
without coercion allowed (value and type)

e.g.
  var a = "42";
  var b = 42;

  a == b;			// true
  a === b;		// false
  
If comparing two non-primitive types like objects including function and array,
since these values are held by reference, both == and === comparison will simply
check whether the references match, not anything about the underlying values

e.g.
  var a = [1,2,3];
  var b = [1,2,3];
  var c = "1,2,3";

  a == c;		// true
  b == c;		// true
  a == b;		// false
  // array a and b have two different reference therefore false
  /* arrays by default get coerced to string by simply joining all values with
     ',' in between
     
If both values in the < comparison are strings, as it is with b < c, the comparison
is made lexicographically (aka alphabetically like a dictionary), but if one or both
is not a string then both values are coerced to be numbers, and a typical numeric
comparison occurs

NaN is neither greater-than nor less-than any other value

Hoisting: where a var appear inside a scope that declaration is taken to belong 
          belong to the entire scope and accessible everywhere throughout
          
E.g. 
  var a = 2;

  foo();					// works because `foo()`
            // declaration is "hoisted"

  function foo() {
    a = 3;

    console.log( a );	// 3

    var a;				// declaration is "hoisted"
              // to the top of `foo()`
              // a in this case has a local scope to the function foo
  }

  console.log( a );	// 2

-if accessing a variable in a scope that's not available, ReferenceError gets
 produced
  
E.g.
  function foo() {
  	a = 1;	// `a` not formally declared
  }
  
  foo();
  a;			// 1 -- oops, auto global variable :(
  
-let allows block scoping unlike var which defines a variable globally or locally 
 to an entire function regardless of block scope
 
-for switch/case statements, if break is omitted, execution is continued
  E.g.
    switch (a) {
    case 2:
    case 10: //acting as if(a === 2 || a === 10)
      // some cool stuff
      break;
    case 42:
      // other stuff
      break;
    default:
      // fallback
    }
  
Strict mode: tightens the rules for certain behaviors to keep the code more 
             optimizable by the engine
  -can be used for individual function or an entire file depending on where it's
   declared
   
Function as values: not only can one pass a value to a function, but a function
  can itself can be a value that's assigned to variables or passed to or returned
  from other functions
  
E.g.
  var foo = function() { //anonymous function
  	// ..
  };

  var x = function bar(){
  	// ..
  };

Immediately invoked function expressions:
  (function IIFE() {})();
    
  -using an IIFE is often used to declare variables that won't affect the
   surrounding code outside of IIFE since it has a variable scope
   
Closure:
  E.g.
    function makeAdder(x) {
      // parameter `x` is an inner variable

      // inner function `add()` uses `x`, so
      // it has a "closure" over it
      function add(y) {
        return y + x;
      };

      return add;
    }
    
    // `plusOne` gets a reference to the inner `add(..)`
    // function with closure over the `x` parameter of
    // the outer `makeAdder(..)`
    var plusOne = makeAdder( 1 );

    // `plusTen` gets a reference to the inner `add(..)`
    // function with closure over the `x` parameter of
    // the outer `makeAdder(..)`
    var plusTen = makeAdder( 10 );

    plusOne( 3 );		// 4  <-- 1 + 3
    plusOne( 41 );		// 42 <-- 1 + 41

    plusTen( 13 );		// 23 <-- 10 + 13
    
The most common usage of closure in JS is the module pattern where it lets one
define private implementation details (variables, functions) that are hidden from
the outside world
E.g.
  function User(){
  	var username, password;

  	function doLogin(user,pw) {
  		username = user;
  		password = pw;

  		// do the rest of the login work
  	}

  	var publicAPI = {
  		login: doLogin
  	};

  	return publicAPI;
  }

  // create a `User` module instance
  var fred = User();

  fred.login( "fred", "12Battery34!" );
  
'this' reference usually points to an object, but which it points to depends on
how the function was called

E.g.
  function foo() {
  	console.log( this.bar ); //this is the "global" object
  }

  var bar = "global";

  var obj1 = {
  	bar: "obj1",
  	foo: foo
  };

  var obj2 = {
  	bar: "obj2"
  };

  // --------

  foo();				// "global"
  obj1.foo();			// "obj1"
  foo.call( obj2 );		// "obj2"
  new foo();			// undefined
  
Prototypes: when referencing a property on an object, if that property doesn't
            exist, JS will auto use that object's internal prototype reference
            to find another object to look for the property on
            
  E.g.
    var foo = {
      a: 42
    };

    // create `bar` and link it to `foo`
    var bar = Object.create( foo );

    bar.b = "hello world";

    bar.b;		// "hello world"
    bar.a;		// 42 <-- delegated to `foo`

  -this can be used to emulate/fake a "class" mechanism with "inheritance"
  -a more natural way of applying prototypes is a pattern called "behavior delegation"
   where one intentionally link objects to delegate from one to the other
   
Polyfill: taking the definition of newer feature and producing a piece of code 
          that's equivalent to the behavior, but is able to run in older JS envs
  E.g. Number.isNaN() provides an accurate non-buggy check for NaN values
  if (!Number.isNaN) { //check if isNaN is an existing implementation 
    Number.isNaN = function isNaN(x) {
      return x !== x; //only NaN value doesn't equal to itself
    };
  }
      
Transpiling: convert newer code to older code equivalents
  -new syntax added is designed to make code more readable and maintainable
  -if transpile only to older browsers, one gets to take advantage of browsers
   performance optimization
  
Default parameter values:
  function foo(a = 2) {
    console.log( a );
  }

  foo();		// 2
  foo( 42 );	// 42
  
Note: void 0 === undefined //true

The 'document' variable exists as a global variable when your code is running
in a browser, not provided by the JS engine, nor is it particularly controlled
by JS spec, it's a special object known as the 'host object'

Methods of the 'document' object are provided by the DOM from browser

Functions like alert(..) and console.log(..) are mechanisms provided by the
browser internals, not the JS engine itself