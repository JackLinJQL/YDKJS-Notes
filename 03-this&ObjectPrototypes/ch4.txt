Chapter 4: Mixing (Up) "Class" Objects
  Class Theory:
    -OO stresses that data intrinsically has associated behaviour that operates
     on it, so proper design is to package up (encapsulate) the data and the behaviour
     together, known as data structure
    -E.g. series of characters known as string and you usually want to do things
     with the data, so the behaviours that can apply to that data are all designed
     as methods of a String class
    -any given string is just an instance of this class, meaning that it's a neatly
     collected packaging of both the character data and the functionality we can
     perform on it
    -classes also imply a way of classifying a certain data structure, given structure
     as a specific variation of a more general base definition
    -e.g. car as a vehicle, so class Vehicle is the parent of class Car
    -Vehicle would be all the stuff that's common to all different types of vehicles
    -polymorphism: idea that a general behavior from a parent class can be overriden
     in a child class to give it more specifics, relative polymorphism lets us reference
     the base behaviour from the overriden behaviour

    "Class" Design Pattern:
      -procedural programming: describing code which only consists of procedures (functions)
       calling other functions without any higher abstractions
      -"functional programming", classes are just one of several common design patterns
      -Java doesn't give you a choice but to have everything as classes, C/C++ or
       PHP can either be procedural or class-oriented

    JavaScript "Classes":
      -JS has some class-like syntactic elements like 'new' and 'instanceOf'
      -but JS ***does NOT*** actually have classes
      -since classes are design patterns, you can, with lots of effort implement
       approximations for much of classical class functionality
      -JS tries to satisfy the extremely pervasive desire to design with classes by
       providing seemingly class-like syntax
      -classes are optional pattern in software design, you have the choice to use them
       in JS or not

  Class Mechanics:
    -Stack class itself is not a "stack", one must instantiate the Stack class before
     you have a concrete data structure thing to operate against

    Building:
      -"class" and "instance" based thinking come from a building construction
      -architect plan out all characteristics of a building, how wide, how tall..
       and does not care where the building will be built or the number of copies
      -architectural blue-prints are only plans for a building
      -a building would then be the physical instantiation of the blue-print plans
      -class is a blueprint that can be instantiated to create an object and an
       object would then be an instance of a class
      -the object is a copy of all the characteristics described by the class
      -one does not generally use an object instance to directly access and manipulate
       its class, but usually possible to at least determine which class an object
       instance comes from
      -a class is instantiated into object form by a cope operation
    Constructor:
      -initialize any information (state) the instance will need
      -almost always called with 'new' to let the language engine know you want
       to construct a new class instance

  Polymorphism:
    -the idea that any method can reference another method (of the same of different name)
     at a higher level of the inheritance hierarchy
    -relative polymorphism because we don't absolutely define which inheritance level
     we want to access, but simply one level up
    -traditionally, super is a direct way for the constructor of a child class
     to reference the constructor of its parent class, in JS, it's the reverse,
     more appropriate to think of the class belonging to the constructor
    -inheritance is done through .prototype in JS, so there is no direct way of
     referencing parent and child constructors
    -definition for a method polymorphs depending on which class you are referencing
     an instance of
    -a child gets a copy of what it needs from the parent class instead of linking
     to its parent class, class inheritance implies copies

    Multiple Inheritance:
      -Deadly diamond, child class inherits from two parent class, each provide
       a common method with same name, which does the child use?

  Mixins:
    -JS doesn't automatically perform copy when you inherit or instantiate
    -there're no classes in JS, only objects and they don't get copied to other
     objects, they get linked together
    -mixins fake the missing copy behaviour in JS

    Explicit Mixins:
      -'extend(..)' is a utility that manually copies parent class for the child
       class, but let's call it mixin(..) here
      E.g.
      // vastly simplified `mixin(..)` example:
      function mixin( sourceObj, targetObj ) {
        for (var key in sourceObj) {
          // only copy if not already present
          if (!(key in targetObj)) {
            targetObj[key] = sourceObj[key];
          }
        }
        return targetObj;
      }
      -note, there're no classes, only objects making copies from and to
      -functions aren't actually duplicated, but rather referenced
      -'Vehicle.drive.call(this)' is known as "explicit pseudo-polymorphism"
      -explicit pseudo-polymorphism should be avoided wherever possible since the
       cost outweighs the benefit in most respects

      Mixing Copies:
        E.g.
        // alternate mixin, less "safe" to overwrites
        function mixin( sourceObj, targetObj ) {
          for (var key in sourceObj) {
            targetObj[key] = sourceObj[key];
          }

            return targetObj;
          }

          var Vehicle = {
            // ...
          };

          // first, create an empty object with
          // Vehicle's stuff copied in
          var Car = mixin( Vehicle, { } );

          // now copy the intended contents into Car
          mixin( {
            wheels: 4,

            drive: function() {
              // ...
            }
        }, Car );
        -mixin: class contents mixed-in just like you mix in chocolate chips into
         cookie dough
        -since the two objects also share refs to their common functions, this means
         that even manual coping of functions (mixins) from one objects to another
         doesn't actually emulate the real duplication from class to instance that
         occurs in class-oriented languages
        -JS functions can't be duplicated, so what one ends up with instead is a
         duplicated reference to the same shared function object, if the shared
         function object is modified, but classes would be affected
        -might as well just define the properties twice, once on each object
        -explicitly mix-in two or more objects can emulate multiple inheritance

      Parasitic Inheritance:
        -some ways explicit and other ways implicit
        -initially make a copy of the definition from parent class then mixin to
         child class definition and pass off this composed object as child instance

    Implicit Mixins:
      E.g.
      var Something = {
        cool: function() {
          this.greeting = "Hello World";
          this.count = this.count ? this.count + 1 : 1;
        }
      };

      Something.cool();
      Something.greeting; // "Hello World"
      Something.count; // 1

      var Another = {
        cool: function() {
          // implicit mixin of `Something` to `Another`
          Something.cool.call( this );
        }
      };

      Another.cool();
      Another.greeting; // "Hello World"
      Another.count; // 1 (not shared state with `Something`)

      -with 'Something.cool.call(this)', it borrows the function Something.cool()
       and call it in the context of Another instead of Something, so assignment
       that Something.cool() makes are applied against the Another object rather
       than the Something object
      -avoid such constructs where possible
