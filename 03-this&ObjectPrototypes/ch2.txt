Chapter 2: 'this' All Makes Sense Now
-again, 'this' is a binding made for each function invocation, based entirely on
 its call-site (how the function is called)

Call-site:
-call-site: where a function is called (not where it's declared)
-call-site is not always locating where a function is called from since certain
 coding patterns can obscure the true call-site
-the call-stack (the stack of functions that have been called to get us to the
 current moment in execution)
-so, call-site is in the invocation before the currently executing function
E.g.
function baz() {
    // call-stack is: `baz`
    // so, our call-site is in the global scope

    console.log( "baz" );
    bar(); // <-- call-site for `bar`
}

function bar() {
    // call-stack is: `baz` -> `bar`
    // so, our call-site is in `baz`

    console.log( "bar" );
    foo(); // <-- call-site for `foo`
}

function foo() {
    // call-stack is: `baz` -> `bar` -> `foo`
    // so, our call-site is in `bar`

    console.log( "foo" );
}

baz(); // <-- call-site for `baz`

-can use JS debugger to put a breakpoint or simply insert 'debugger' statement

Nothing But Rules:
  Default Binding:
    -standalone function invocation, think of it as the default catch-all rule
     when none of the other rules apply
    E.g.
    function foo() {
    	console.log( this.a );
    }
    var a = 2;
    foo(); // 2
    
    -variables declared in the global scope are synonymous with global-object
     properties of the same name, they're each other, 2 sides of the same coin
    -in this case, default binding for 'this' applies to the function call, so
     'this' points at the global object
    -if 'strict mode', global object is not eligible for the default binding, so
     'this' is instead set to undefined, the 'strict mode' state of the call-site
     of foo() is irrelevant
     
    E.g.
    function foo() {
    	"use strict";
    	console.log( this.a );
    }
    var a = 2;
    foo(); // TypeError: `this` is `undefined`
    
  -entire program should either be Strict or non-Strict and mixing is frowned upon

  Implicit Binding:
    -does the call-site have a context object?
    E.g.
    function foo() {
    	console.log( this.a );
    }

    var obj = {
    	a: 2,
    	foo: foo
    };

    obj.foo(); // 2
    
    -the function is not "owned" or "contained" by the 'obj' object
    -but, the call-site uses the 'obj' context to reference the function, so one
     could say the 'obj' "owns" or "contains" the function reference at the time
     the function is called
    
    -when there is a context object for a function reference, the implicit binding
     rule says that it's that object which should be used for 'this' binding
     -then 'this.a' become synonymous with 'obj.a'
    
    -only the top/last level of an object property reference chain matters to the
     call-site
    E.g.
    function foo() {
    	console.log( this.a );
    }
    var obj2 = {
    	a: 42,
    	foo: foo
    };
    var obj1 = {
    	a: 2,
    	obj2: obj2
    };

    obj1.obj2.foo(); // 42
    
    Implicit Lost
      -when an implicitly bound function loses that binding, it usually falls
       back to the default binding, either global object or undefined (strict)
      E.g.
      function foo() {
      	console.log( this.a );
      }
      var obj = {
      	a: 2,
      	foo: foo
      };
      var bar = obj.foo; // function reference/alias!
      var a = "oops, global"; // `a` also property on global object
      bar(); // "oops, global"
      
      -'bar' appears to be a reference to obj.foo, it's really just another ref
       to 'foo' itself, moreover, the call-site is what matters, call-site in this
       case is 'bar()' which is plain, un-decorated call and thus the default
       binding applies
      
      E.g.
      function foo() {
      	console.log( this.a );
      }
      function doFoo(fn) {
      	// `fn` is just another reference to `foo`

      	fn(); // <-- call-site!
      }
      var obj = {
      	a: 2,
      	foo: foo
      };
      var a = "oops, global"; // `a` also property on global object
      doFoo( obj.foo ); // "oops, global"
      
      -parameter passing is just implicit assignment, therefore, same result as
       before
       
      -if function you're passing callback to is built-in, there's no difference
      E.g.
      setTimeout( obj.foo, 100 ); // "oops, global"
      
      -common that callback function lose their 'this' binding, but the function
       that gets passed to callback can intentionally change 'this' for the call
       
      
  Explicit Binding:
    -implicit binding required the mutation of the object in question to include
     reference on itself to the function, and user property function ref to 
     implicitly bind 'this' to the object
    -functions have 'call(..)' and 'apply(..)' methods, where vast majority of
     functions have access to 'call(..)' and 'apply(..)'
    -both take, as their first parameter, an object to use for the 'this', the invoke
     the function with that 'this' specified, hence explicit binding
    E.g.
    function foo() {
      console.log( this.a );
    }
    var obj = {
      a: 2
    };
    foo.call( obj ); // 2
    
    -explicit binding with 'foo.call(..)' forces foo's 'this' to be 'obj'
    -if a primitive type is passed in (string, boolean or number), the primitive
     values get wrapped in its object-form (new String(..)...), referred to as "boxing"
    
    Hard Binding:
      E.g.
      function foo() {
      	console.log( this.a );
      }
      var obj = {
      	a: 2
      };
      var bar = function() {
      	foo.call( obj );
      };
      bar(); // 2
      setTimeout( bar, 100 ); // 2
      // `bar` hard binds `foo`'s `this` to `obj`
      // so that it cannot be overriden
      bar.call( window ); // 2
      
      E.g.: typical hard binding
      function foo(something) { 
      	console.log( this.a, something );
      	return this.a + something;
      }

      var obj = {
      	a: 2
      };

      var bar = function() {
        //when using apply, foo automatically gets invoked
      	return foo.apply( obj, arguments ); //apply takes in obj as 'this', arguments as an aguments list for foo
      };

      var b = bar( 3 ); // 2 3
      console.log( b ); // 5
      
      E.g.
      function foo(something) {
      	console.log( this.a, something );
      	return this.a + something;
      }
      // simple `bind` helper
      function bind(fn, obj) {
      	return function() {
      		return fn.apply( obj, arguments );
      	};
      }
      var obj = {
      	a: 2
      };
      var bar = bind( foo, obj );
      var b = bar( 3 ); // 2 3
      console.log( b ); // 5
      
      -since hard binding is common, ES5 had added Function.prototype.bind
      
      E.g.
      function foo(something) {
      	console.log( this.a, something );
      	return this.a + something;
      }

      var obj = {
      	a: 2
      };

      var bar = foo.bind( obj ); //bind returns a new function with 'this' set as the context that's specified

      var b = bar( 3 ); // 2 3
      console.log( b ); // 5
      
  API call "Contexts"
    -many new built-in functions in JS provide an optional param usually called
     "context", designed as a work-around for using bind(..)
     
    E.g. 
    function foo(el) {
      console.log( el, this.id );
    }
    var obj = {
      id: "awesome"
    };
    // use `obj` as `this` for `foo(..)` calls
    [1, 2, 3].forEach( foo, obj ); // 1 awesome  2 awesome  3 awesome
    
    -internally, these functions uses explicit binding via call(..) or apply(..)
    
  'new' Binding
    -there really is *no connection* to class-oriented functionality implied by 'new'
     usage in JS
    -in JS, a constructor is just a function that happen to be called with the 'new'
     operator in front of them, they're not attached to classes nor do they instantiate
     a class, they're not even special types of functions
     "When Number is called as part of a new expression it is a constructor: it initializes the newly created object"
    -pretty much any function including the built-in object functions like Number(..)
     can be called with 'new' in front of it makes that function a constructor call
    -so, there's no such thing as "constructor functions", but rather construction calls
     of functions
    -when a function is invoked with 'new'
      1. a brand new object is created (aka, constructed) out of thin air
      2. the newly constructed object is [[Prototype]]-linked
      3. the newly constructed object is set as the 'this' binding for that function call
      4. unless function returns its own alternate object, the 'new'-invoked function
         call will automatically return the newly constructed object
      E.g.
      function foo(a) {
      	this.a = a;
      }

      var bar = new foo( 2 );
      console.log( bar.a ); // 2
      
      -by calling foo(..) with 'new', a new object is created and it's set to 'this'
       for the call of foo(..), so 'new' is the final way that a function call's
       'this' can be bound
    
Everything In Order:
  -default binding has the lowest priority
  E.g.
  function foo() {
  	console.log( this.a );
  }
  var obj1 = {
  	a: 2,
  	foo: foo
  };
  var obj2 = {
  	a: 3,
  	foo: foo
  };
  obj1.foo(); // 2
  obj2.foo(); // 3
  obj1.foo.call( obj2 ); // 3
  obj2.foo.call( obj1 ); // 2
    
  -explicit binding takes precedence over implicit binding, so ask if explicit
   applies before implicit
    
  E.g.
  function foo(something) {
  	this.a = something;
  }
  var obj1 = {
  	foo: foo
  };
  var obj2 = {};
  obj1.foo( 2 );
  console.log( obj1.a ); // 2
  obj1.foo.call( obj2, 3 );
  console.log( obj2.a ); // 3
  
  var bar = new obj1.foo( 4 );
  console.log( obj1.a ); // 2
  console.log( bar.a ); // 4
    
  -'new' binding is more precedent than implicit binding
  -'new' and 'call'/'apply', 'new foo.call(obj1)' is not allowed
  E.g.
  function foo(something) {
  	this.a = something;
  }
  var obj1 = {};
  var bar = foo.bind( obj1 );
  bar( 2 );
  console.log( obj1.a ); // 2
  
  var baz = new bar( 3 );
  console.log( obj1.a ); // 2
  console.log( baz.a ); // 3
  
  -'bar' is hard bound against obj1, but new bar(3) did not change obj1.a, instead
   the hard bound (to 'obj1') call to 'bar(..)' is able to be overriden with 'new'
  -since 'new' used, a newly created object gets returned and assigned to 'baz'
  
  -'new' being able to override hard binding is useful because when creating a
   function (that can be used with 'new' for constructing objects) that essentially
   ignores the 'this' hard binding but which presets some or all of the function's
   arguments
  
Binding Exceptions:
  Ignored 'this':
    -if 'null' or 'undefined' was passed as a 'this' binding parameter to 'call',
     'apply' or 'bind', those values are effectively ignored, and default binding
     rule applies to the invocation
     
    E.g.
    function foo() {
    	console.log( this.a );
    }

    var a = 2;

    foo.call( null ); // 2
    
    -useful to use 'apply(..)' for spreading out arrays of values as params to a
     function call, similarly, 'bind(..)' can curry parameters (pre-set values)
    E.g.
    function foo(a,b) {
    	console.log( "a:" + a + ", b:" + b );
    }

    // spreading out array as parameters
    foo.apply( null, [2, 3] ); // a:2, b:3

    // currying with `bind(..)`
    var bar = foo.bind( null, 2 );
    bar( 3 ); // a:2, b:3
    
  -ES6 has ... spread operator which will syntactically "spread out" an array
   as parameters without needing "apply(..)" such as "foo(...[1,2])" which amounts
   to foo(1, 2), syntactically avoiding a 'this' binding if unnecessary, but no
   substitute for currying
  -slight hidden "danger" in always using 'null' when 'this' doesn't matter, if
   making a function call (from third party) and that function doesn't make a 'this'
   reference, the default binding rule means it might inadvertently reference the
   'global' object ('window' in the browser)
   
  Safer 'this':
    -pass a specifically set up object for 'this' which is guaranteed not to be
     an object that can create problematic side effects
    -pass DMZ (de-militarized zone) object for ignored 'this' binding which makes
     sure that any hidden/unexpected usage of 'this' will be restricted to the
     empty object, insulating 'global' object from side-effects
    -easiest way to setup a totally empty object is 'Object.create(null)' which
     is more empty than just {}
    E.g.
    function foo(a,b) {
    	console.log( "a:" + a + ", b:" + b );
    }
    // our DMZ empty object
    var ø = Object.create( null );
    // spreading out array as parameters
    foo.apply( ø, [2, 3] ); // a:2, b:3

    // currying with `bind(..)`
    var bar = foo.bind( ø, 2 );
    bar( 3 ); // a:2, b:3
    
  Indirection:
    -when "indirect references", default binding rule applies
    E.g.
    function foo() {
    	console.log( this.a );
    }
    var a = 2;
    var o = { a: 3, foo: foo };
    var p = { a: 4 };

    o.foo(); // 3
    (p.foo = o.foo)(); // 2
    
    -result value of the assignment expression p.foo = o.foo is a ref to just
     the underlying function object
    
  Softening Binding:
    -hard-binding reduces the flexibility of a function, preventing manual 'this'
     override with either the implicit binding or even subsequent explicit binding
     attempts
    -providing a different default for binding that's not global or undefined while
     leaving the function able to be manually 'this' bound via implicit binding or
     explicit binding would be nice 
    -softBind(..) wraps the specified function in logic that checks the 'this'
     at call-time and if it's 'global' or 'undefined', uses a pre-specified
     alternate default ('obj'), otherwise 'this' is left untouched
    E.g.
    function foo() {
       console.log("name: " + this.name);
    }
    var obj = { name: "obj" },
        obj2 = { name: "obj2" },
        obj3 = { name: "obj3" };
    var fooOBJ = foo.softBind( obj );

    fooOBJ(); // name: obj

    obj2.foo = foo.softBind(obj);
    obj2.foo(); // name: obj2   <---- look!!!

    fooOBJ.call( obj3 ); // name: obj3   <---- look!

    setTimeout( obj2.foo, 10 ); // name: obj   <---- falls back to soft-binding
    
    -soft-bound version of the foo() can be manually 'this'-bound to 'obj2' or
     'obj3', falls back to 'obj' if the default binding would otherwise apply
  
Lexical 'this':
  -arrow functions do not abide by the 4 rules
  E.g.
  function foo() {
  	// return an arrow function
  	return (a) => {
  		// `this` here is lexically adopted from `foo()`
  		console.log( this.a );
  	};
  }

  var obj1 = {
  	a: 2
  };

  var obj2 = {
  	a: 3
  };

  var bar = foo.call( obj1 );
  bar.call( obj2 ); // 2, not 3!
    
  -arrow function created in foo() lexically captures whatever foo()s 'this' at
   its call-time, since foo() was 'this' bound to 'obj1', 'bar' (a ref to the returned
   arrow function) will also be 'this' bound to 'obj1', the lexical binding of
   an arrow-function cannot be overriden even with 'new'
  E.g.
  function foo() {
  	setTimeout(() => {
  		// `this` here is lexically adopted from `foo()`
  		console.log( this.a );
  	},100);
  }

  var obj = {
  	a: 2
  };

  foo.call( obj ); // 2
  
  E.g.
  function foo() {
  	var self = this; // lexical capture of `this`
  	setTimeout( function(){
  		console.log( self.a );
  	}, 100 );
  }

  var obj = {
  	a: 2
  };

  foo.call( obj ); // 2

  -while 'self = this' and arrow functions both seem like 'good' solutions to not
   use 'bind(..), they're essentially fleeing from 'this'
  -don't mix the two in a same function