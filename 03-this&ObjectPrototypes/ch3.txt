Chapter 3: Objects
Syntax:
  -objects come in two forms: declarative (literal) form and the constructed form
  -literal:
    E.g.
    var myObj = {
    	key: value
    	// ...
    };
  -constructed:
  E.g.
  var myObj = new Object();
  myObj.key = value;
  
  -constructed and literal form result in exactly the same sort of object, only
   difference is that one can add one or more key/value pairs to the literal 
   declaration whereas the declarative one can only add one-by-one
  -extremely uncommon to use "constructed form"

Type:
  -6 primary types aka. language types
    -string
    -number
    -boolean
    -undefined
    -null (object, but a bug)
    -object
  -common mis-statement that "everything in JS is an object", clearly not true
  -complex primitives
    -function, sub-type of object ("callable object"), "first class" in that they're
     basically just normal objects (with callable behaviour semantics bolted on),
     so they can be handled like an other plain object
    -arrays are also a form of objects, with extra behaviour, the organization
     of contents in array is slight more structured than a general object
  
  Built-in Objects
    -String, Number, Boolean, Object, Function, Array, Date, RegExp, Error
    -in JS, these are just built-in functions, each can be used as a constructor
     with the result being a newly constructed object of the sub-type in question
    E.g.
    var strPrimitive = "I am a string";
    typeof strPrimitive;							// "string"
    strPrimitive instanceof String;					// false

    var strObject = new String( "I am a string" );
    typeof strObject; 								// "object"
    strObject instanceof String;					// true

    // inspect the object sub-type
    Object.prototype.toString.call( strObject );	// [object String]
    
    -primitive value string isn't a String object, it's a primitive literal and 
     immutable value, to perform operations on it, such as length, String object
     is required
    -JS automatically coerces a "string" primitive to a String object when necessary
    -strongly preferred to use the literal form for a value, where possible instead
     of object construction
    -Objects, Arrays, & RegExps are all objects regardless of whether the literal
     or constructed form is used
    -constructed form does offer in some cases more options in creation than the
     literal form counterpart
    -only use constructed form if you need the extra options
    -Error object is rarely created explicitly in code, but usually created automatically
     when exceptions are thrown
Contents:
  -content of an object consists of values (any type) stored at specifically named
   locations called properties
  -"contents" aren't actually stored inside the objects, engine stores values in
   implementation-dependent ways and may not store them in some object container
  -what is stored in the containers are these property names acting as pointers
   (references) to where the values are stored
  -access value at the location 'a' in 'myObject' uses either '.' or '[]'
  -'.a' syntax is usually referred to as "property" access, whereas ["a"] syntax
   is usually referred to as "key" access
  -main difference is that '.' operator requires an Identifier compatible property
   name whereas [".."] take basically any UTF-8/unicode compatible string as the
   name for the property
  -E.g. "super-fun" needs [] since it's invalid Identifier property name
  -in objects, property names are ALWAYS strings, if any other value types are used,
   they will first be converted to string including numbers
  
  E.g.
  var myObject = { };

  myObject[true] = "foo";
  myObject[3] = "bar";
  myObject[myObject] = "baz";
   
  myObject["true"];				// "foo"
  myObject["3"];					// "bar"
  myObject["[object Object]"];	// "baz"
  
  Computed Property Names:
    -'myObject[..]' is useful if needed to computer expression value as key name
     like 'myObject[prefix + name]', not really helpful when declaring objects
     using object-literal syntax
    E.g. Computed Property Names
    var prefix = "foo";
    var myObject = {
    	[prefix + "bar"]: "hello",
    	[prefix + "baz"]: "world"
    };

    myObject["foobar"]; // hello
    myObject["foobaz"]; // world
  
    Property vs. Method:
    -in other languages, functions which belong to objects (aka, "classes") are
     referred to as "methods", not uncommon to hear "method access" as oppose to
     "property access"
    -technically, functions never "belong" to object
    -as 'this' is dynamically bound at run-time, at the call-site, thus its 
     relationship to the object is indirect at best
    -every time one access a property on an object, that's a property access,
     regardless of the type of value you get back
    E.g.
    function foo() {
    	console.log( "foo" );
    }
    var someFoo = foo;	// variable reference to `foo`
    var myObject = {
    	someFoo: foo
    };
    foo;				// function foo(){..}
    someFoo;			// function foo(){..}
    myObject.someFoo;	// function foo(){..}
    
    -'someFoo' and 'myObject.someFoo' are just two separate references to the
     same function, so neither really makes sense to be called a method
    -conclusion, method or function is interchangeable in JS
    -ES6 adds a 'super' reference, typically going to be used with 'class'
    E.g. even when one declare a function expression as part of the object-literal,
     that function doesn't magically belong more to the object, still just multiple
     references to the same function object
    var myObject = {
   	  foo: function foo() {
   		 console.log( "foo" );
   	  }
    };
    var someFoo = myObject.foo;
    someFoo;		// function foo(){..}
    myObject.foo;	// function foo(){..}
    
  Arrays:
    -arrays assume numeric indexing, values are stored at indices at non-negative ints
    -arrays are objects, so one can add properties onto the array
    E.g.
    var myArray = [ "foo", 42, "bar" ];
    myArray.baz = "baz";
    myArray.length;	// 3, length does not change from adding property
    myArray.baz;	// "baz"
    
    -arrays can technically be used as plain key/value object, but they have
     behaviours and optimizations that's specific to their intended use
    -if one tries to add a property to an array, but the property looks like a number,
     it'll end up instead as a numeric index, thus modifying the array content
    E.g.
    var myArray = [ "foo", 42, "bar" ];
    myArray["3"] = "baz"; //if added to index inconsecutively, empty indices gets a null value
    myArray.length;	// 4
    myArray[3];		// "baz"
    
  Duplicating Objects:
    E.g.
    function anotherFunction() { /*..*/ }
    var anotherObject = {
    	c: true
    };
    var anotherArray = [];
    var myObject = {
    	a: 2,
    	b: anotherObject,	// reference, not a copy!
    	c: anotherArray,	// another reference!
    	d: anotherFunction
    };
    anotherArray.push( anotherObject, myObject );
    
    -need to determine if a shallow or deep copy is needed
    -a shallow copy would end up with 'a' on the new object as a copy of the
     value '2', but 'b', 'c', and 'd' properties as just references to the same
     place as the references of the original object
    -a deep copy would duplicate not only 'myObject', but 'anotherObject', and
     'anotherArray', but an issue occurs when 'anotherArray' has references to
     'anotherObject' and 'myObject', so an infinite circular duplication problem
     occurs due to the circular reference
    -one subset solution is that objects which are JSON-safe (serialize to a JSON
     string then re-parsed to an object) can easily be duplicated with:
     var newObj = JSON.parse( JSON.stringify( someObj ) );
    -shallow copy has less issues, so ES6 now define 'Object.assign(..)' for this,
     it takes a target object as its first parameter, and one or more source objects
     as subsequent parameters
    -it iterates over the enumerable, owned keys on the source object(s) and
     copies them
    E.g.
    var newObj = Object.assign({}, {a: 2}, {b:3}) //newObj = {a: 2, b: 3}
    
  Property Descriptors:
    -as of ES5, property descriptors were introduced
    E.g.
    var myObject = {
    	a: 2
    };

    Object.getOwnPropertyDescriptor( myObject, "a" );
    // {
    //    value: 2,
    //    writable: true,
    //    enumerable: true,
    //    configurable: true
    // }
    
    -to create property descriptors, we can use Object.defineProperty(..) or
     modify existings ones
    E.g.
    var myObject = {};
    Object.defineProperty( myObject, "a", {
    	value: 2,
    	writable: true,
    	configurable: true,
    	enumerable: true
    } ); //only assigning 'a' like this if modifying the descriptor characteristics

    myObject.a; // 2
    
    Writable: ability to change the value of a property
    E.g.
    var myObject = {};
    Object.defineProperty( myObject, "a", {
    	value: 2,
    	writable: false, // not writable!
    	configurable: true,
    	enumerable: true
    } );
    myObject.a = 3;
    myObject.a; // 2
    
    -modification of 'value' silently fails, unless strict mode is used which
     raises a type error
    
    Configurable:
    -as long as a property is configurable, 'defineProperty' can be used to modify
     its descriptor definition
    E.g.
    var myObject = {
    	a: 2
    };
    myObject.a = 3;
    myObject.a;					// 3
    Object.defineProperty( myObject, "a", {
    	value: 4,
    	writable: true,
    	configurable: false,	// not configurable!
    	enumerable: true
    } );
    myObject.a;					// 4
    myObject.a = 5;
    myObject.a;					// 5
    Object.defineProperty( myObject, "a", {
    	value: 6,
    	writable: true,
    	configurable: true,
    	enumerable: true
    } ); // TypeError
    
    -be careful, changing configurable to false is a one-way action and cannot be
     undone
    -if configurable:false already, writable can always be chagned from true to false
     without error, but not back to true if already false
    
    E.g. configurable:false prevents the ability to use 'delete' operator to remove existing property
    var myObject = {
    	a: 2
    };
    myObject.a;				// 2
    delete myObject.a;
    myObject.a;				// undefined
    Object.defineProperty( myObject, "a", {
    	value: 2,
    	writable: true,
    	configurable: false,
    	enumerable: true
    } );
    myObject.a;				// 2
    delete myObject.a;
    myObject.a;				// 2
    
    -if an object property is the last remaining reference to some object/function,
     'delete' can be used to remove the reference and the unreferenced object gets
     garbage collected, but do not think of it as a tool to free allocated memory
    
    Enumerable:
    -controls if a property will show up in certain object-property enumerations,
     such as the for..in loop
  
  Immutability:
  -sometimes desired to make properties or objects that cannot be changed
  -shallow immutability, only affect the object and its direct property characteristics
  -if object has a reference to another object, the contents of that object are not
   affected and remain mutable
  
    Object Constant:
      -with writable:false and configurable:false, one can essentailly create a
       constant
      E.g.
      var myObject = {};

      Object.defineProperty( myObject, "FAVORITE_NUMBER", {
      	value: 42,
      	writable: false,
      	configurable: false
      } );
      
      Prevent Extensions:
      -prevent an object from having new properties added to it, otherwise leave
       the rest of the object's properties alone, call "Object.preventExtensions(..)"
      E.g.
      var myObject = {
      	a: 2
      };

      Object.preventExtensions( myObject );

      myObject.b = 3;
      myObject.b; // undefined, failed silently since non-strict mode
      
    Seal:
      -"Object.seal(..)" takes an existing object and essentially calls preventExtensions
       on it, but also marks all its existing properties as configurable: false
      -not only can you not add anymore properties, you also can't reconfigure
       or delete any existing properties, but can still modify their values
    
    Freeze:
      -"Object.freeze(..)" takes an existing object and call Object.seal(..) and marks
       all "data accessor" properties as writable:false, so their values cannot be
       changed
      -highest level of immutability
      -can "deeop freeze" an object by calling freeze on all referenced objects
      
  [[Get]]:
    -'myObject.a' is a property access, but it doesn't just look in 'myObject'
     for a property of the name 'a'
    -[[Get]] operation gets performed instead where it first inspects the object
     for a property of the requested name, and if it find it, return the value
     accordingly
    -if it doesn't find a property of the requested name, it traverses through
     the [[Prototype]] chain, if any
    -'undefined' is returned if it cannot find the property anyhow
    -different compared to reference variable, if reference variable not found
     through the lexical scope, ReferenceError is returned instead
    -cannot distinguish if undefined was the actual value or value was not found
    
  [[Put]]:
  -when invoking [[put]], it behaves based on a number of factors, including
   whether the property is already present on the object or not
  -if property is present, algo will check:
    1. is the property an accessor descriptor, if so, call the setter, if any
    2. is the property a data description with writable of false, if so fail in
       non-strict mode else TypeError in strict mode
    3. otherwise, set the value to the existing property as normal
  -if not yet present, [[put]] is even more nuanced and complex
  
  Getters & Setters:
    -may be possible to override the default [[Get]] or [[Put]] operations for
     an entire object (not just per property)
    -getters are properties which actually call a hidden function to retrieve
     a value, setters are properties which actually call a hidden function to set a value
    -when defining a property to have either a getter or setter, they become
     "accessor descriptor", the value and writable characteristics are ignored and
     JS considers set and get characteristics of the property as well as configurable
     and enumerable
    E.g.
    var myObject = {
    	// define a getter for `a`
    	get a() {
    		return 2;
    	}
    };
    Object.defineProperty(
    	myObject,	// target
    	"b",		// property name
    	{			// descriptor
    		// define a getter for `b`
    		get: function(){ return this.a * 2 },

    		// make sure `b` shows up as an object property
    		enumerable: true
    	}
    );

    myObject.a; // 2
    myObject.b; // 4
    
    -in both cases, we created a property on the object that actually doesn't
     hold a value, but who access automatically result in a hidden function call
     to the getter function
    
    E.g.
    var myObject = {
    	// define a getter for `a`
    	get a() {
    		return 2;
    	}
    };
    myObject.a = 3;
    myObject.a; // 2
    
    -since only getter is defined for 'a', if value of a is to be set later, the
     set operation will silently throw the assignment away since getter is hardcoded
     to return '2'
    -will almost certainly want to always declare both getter and setter
    E.g.
    var myObject = {
    	// define a getter for `a`
    	get a() {
    		return this._a_;
    	},

    	// define a setter for `a`
    	set a(val) {
    		this._a_ = val * 2;
    	}
    };
    myObject.a = 2;
    myObject.a; // 4
    
    -'_a_' is purely by convention, implies nothing special about its behaviour
    
  Existence:
    -check if an object has certain property without asking to get property's value
    E.g.
    var myObject = {
    	a: 2
    };

    ("a" in myObject);				// true
    ("b" in myObject);				// false

    myObject.hasOwnProperty( "a" );	// true
    myObject.hasOwnProperty( "b" );	// false
    
    -'in' operator check to see if the property is in the object or if it exists
     at any higher level of the [[Prototype]] chain
    -by contrast, 'hasOwnProperty(..)' checks to see if only 'myObject' has the
     property or not and will not consult the [[Prototype]] chain
    -'hasOwnProperty(..)' is accessible for all normal object via delegation to
     Object.prototype
    -more robust way of checking is 'Object.prototype.hasOwnProperty.call(myObject, "a")'
     and uses explicit 'this' binding to apply it against our 'myObject'
    -'in' only checks for the existence of a property name
    
  Enumeration:
    E.g.
    var myObject = { };
    Object.defineProperty(
    	myObject,
    	"a",
    	// make `a` enumerable, as normal
    	{ enumerable: true, value: 2 }
    );
    Object.defineProperty(
    	myObject,
    	"b",
    	// make `b` NON-enumerable
    	{ enumerable: false, value: 3 }
    );
    myObject.b; // 3
    ("b" in myObject); // true
    myObject.hasOwnProperty( "b" ); // true
    
    for (var k in myObject) {
    	console.log( k, myObject[k] );
    }
    // "a" 2
    
    -when for..in enumerate an array it will include not only all the numeric
     indices, but also any enumerable properties
    -good idea to use 'for..in' loops only on objects and traditional for loops
     for values stored in arrays
    
    -'propertyIsEnumerable(..)' tests whether the given property name exists
     directly on the object and is also enumerable:true
    -'getOwnPropertyName' returns all the properties, enumerable or not
    -'in' vs 'hasOwnProperty(..)' differ in whether they consult the [[Prototype]]
     chain or not, Object.keys(..) and Object.getOwnPropertyNames(..) both inspect
     only the direct object specified
    
  Iteration:
    -ES5 added iteration helpers for arrays, including 'forEach(..)', 'every(..)',
     'some(..)' where each accepts a function callback to apply to each element
     in the array
    -forEach(..) will iterate over all values in the array and ignores any callback
     return values
    -every(..) keeps going until the end of the callback returns a falsy value
    -some(..) keeps going until the end or the callback returns a truthy value
    -every(..) and some(..) behave somewhat like a break statement inside a normal
     for loop
    -order of iteration over an object's properties is not guaranteed and may
     vary between different JS engines
    -do not rely on any observed ordering for anything that quires consistency 
     among environments
    -to iterate over values directly, ES6 adds for..of syntax for iterating over
     arrays
    -for..of asks an iterator object of the thing being iterated and the loop then
     iterates over the successive return values from calling that iterator object's
     next() method, once for each loop iteration
    -Arrays have built-in @@iterator
    E.g.
    var myArray = [ 1, 2, 3 ];
    var it = myArray[Symbol.iterator]();

    it.next(); // { value:1, done:false }
    it.next(); // { value:2, done:false }
    it.next(); // { value:3, done:false }
    it.next(); // { done:true }
    
    -@@iterator is an internal property of an object using ES6 Symbol: Symbol.iterator,
     @@iterator is not the iterator object, but a function that returns the
     iterator object
    -when next() is called, it returns { value: .., done: ..}
    
    -normally, regular objects do not have built-in @@iterator
    E.g.
    var myObject = {
    	a: 2,
    	b: 3
    };

    Object.defineProperty( myObject, Symbol.iterator, {
    	enumerable: false,
    	writable: false,
    	configurable: true,
    	value: function() {
    		var o = this;
    		var idx = 0;
    		var ks = Object.keys( o );
    		return {
    			next: function() {
    				return {
    					value: o[ks[idx++]],
    					done: (idx > ks.length)
    				};
    			}
    		};
    	}
    } );

    // iterate `myObject` manually
    var it = myObject[Symbol.iterator]();
    it.next(); // { value:2, done:false }
    it.next(); // { value:3, done:false }
    it.next(); // { value:undefined, done:true }

    // iterate `myObject` with `for..of`
    for (var v of myObject) {
    	console.log( v );
    }
    // 2
    // 3
  
  E.g.
  var randoms = {
  	[Symbol.iterator]: function() {
  		return {
  			next: function() {
  				return { value: Math.random() };
  			}
  		};
  	}
  };

  var randoms_pool = [];
  for (var n of randoms) {
  	randoms_pool.push( n );

  	// don't proceed unbounded!
  	if (randoms_pool.length === 100) break;
  }